---
- name: run cert generation script
  delegate_to: localhost
  run_once: true
  command: "bash {{ playbook_dir }}/roles/kubernetes/files/make-ca-cert.sh"
  args:
    creates: "{{ playbook_dir }}/ssl/kubernetes/server.crt"
  environment:
    MASTERS: "kubernetes.service.consul"
    DNS_DOMAIN: "{{ dns_domain }}"
    SERVICE_CLUSTER_IP_RANGE: "{{ kube_service_addresses }}"
    CERT_DIR: "{{ playbook_dir }}/ssl/kubernetes"
  tags:
    - secrets
    - kubernetes

- name: create system kubernetes groups
  sudo: yes
  group:
    name: kube
    state: present
    system: yes
  tags:
    - secrets
    - kubernetes

- name: add default user to kubernetes group
  sudo: yes
  user:
    name: "{{ ansible_ssh_user }}"
    system: yes
    groups: "kube"
  tags:
    - secrets
    - kubernetes

- name: upload certificates to masters
  sudo: yes
  copy:
    src: "{{ playbook_dir }}/ssl/kubernetes/{{ item }}"
    dest: "{{ kube_cert_dir }}/{{ item }}"
    group: "kube"
    mode: 0440
  with_items:
    - "ca.crt"
    - "server.crt"
    - "server.key"
    - "kubecfg.crt"
    - "kubecfg.key"
    - "kubelet.crt"
    - "kubelet.key"
  when: "{{ 'role=control' in group_names }}"
  notify:
    - restart kubelet
  tags:
    - kubernetes

- name: populate users for basic auth in API
  sudo: yes
  lineinfile:
    dest: "{{ kube_users_dir }}/known_users.csv"
    create: yes
    line: '{{ item.value.pass }},{{ item.key }},{{ item.value.role }}'
  with_dict: "{{ kube_users }}"
  when: "{{ 'role=control' in group_names }}"
  notify:
    - restart kubelet
  tags:
    - master
    - kubernetes

- name: upload certificates to nodes
  sudo: yes
  copy:
    src: "{{ playbook_dir }}/ssl/kubernetes/{{ item }}"
    dest: "{{ kube_cert_dir }}/{{ item }}"
    group: "kube"
    mode: 0440
  with_items:
    - "ca.crt"
    - "kubelet.crt"
    - "kubelet.key"
  when: "{{ 'role=control' not in group_names }}"
  tags:
    - kubernetes
